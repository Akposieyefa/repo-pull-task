// Code generated by mockery v2.30.18. DO NOT EDIT.

package testing

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	providers "github.com/wisdommatt/akpos-assignment/services/scm/providers"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// ListCommits provides a mock function with given fields: ctx, params
func (_m *Provider) ListCommits(ctx context.Context, params providers.ListCommitsParams) ([]*providers.Commit, error) {
	ret := _m.Called(ctx, params)

	var r0 []*providers.Commit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, providers.ListCommitsParams) ([]*providers.Commit, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, providers.ListCommitsParams) []*providers.Commit); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*providers.Commit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, providers.ListCommitsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositories provides a mock function with given fields: ctx, params
func (_m *Provider) ListRepositories(ctx context.Context, params providers.ListRepositoriesParams) ([]*providers.Repository, error) {
	ret := _m.Called(ctx, params)

	var r0 []*providers.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, providers.ListRepositoriesParams) ([]*providers.Repository, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, providers.ListRepositoriesParams) []*providers.Repository); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*providers.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, providers.ListRepositoriesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Provider) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
